"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("core-js/modules/es6.object.assign");

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash.mapkeys"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Form = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Form/Form"));

var _FormGroup = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Form/FormGroup"));

var _Button = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/elements/Button/Button"));

var _Message = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Message/Message"));

var _MessageItem = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Message/MessageItem"));

var _MessageList = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Message/MessageList"));

var _MessageHeader = _interopRequireDefault(require("semantic-ui-react/dist/commonjs/collections/Message/MessageHeader"));

var _rcForm = require("rc-form");

var _styledSystem = require("styled-system");

var _FormField = _interopRequireDefault(require("./FormField"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var StyledFormGroup = (0, _styledComponents.default)(_FormGroup.default)`
  ${_styledSystem.space}
`;

var Form =
/*#__PURE__*/
function (_React$Component) {
  _inherits(Form, _React$Component);

  function Form(props) {
    var _this;

    _classCallCheck(this, Form);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Form).call(this, props));
    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {
      errors: []
    };
    return _this;
  }

  _createClass(Form, [{
    key: "onSubmit",
    value: function onSubmit() {
      var _this2 = this;

      var _this$props = this.props,
          onSubmit = _this$props.onSubmit,
          onError = _this$props.onError;
      this.props.form.validateFields(function (errors, values) {
        if (errors) {
          var errorMessages = [];
          (0, _lodash.default)(errors, function (value) {
            value.errors.map(function (error) {
              return errorMessages.push(error.message);
            });
          });

          _this2.setState({
            errors: errorMessages
          });

          onError(errors);
          return;
        }

        _this2.setState({
          errors: []
        });

        onSubmit(values);
      });
    }
  }, {
    key: "getFormFieldComponent",
    value: function getFormFieldComponent(field) {
      var getFieldError = this.props.form.getFieldError;
      var errors = getFieldError(field.name);
      var isErrored = false;

      if (errors && errors.length > 0) {
        isErrored = true;
      }

      return _react.default.createElement(_FormField.default, _extends({
        key: field.name,
        label: field.label,
        control: field.control
      }, field.controlProps, {
        error: isErrored,
        messages: errors
      }));
    }
  }, {
    key: "generateFormFields",
    value: function generateFormFields(fields) {
      var _this3 = this;

      var decorator = this.props.form.getFieldDecorator;
      var generatedFields = fields.map(function (field) {
        if (field.type === 'group') {
          return _react.default.createElement(StyledFormGroup, {
            key: field.name,
            widths: field.widths,
            grouped: field.grouped,
            unstackable: field.unstackable
          }, _this3.generateFormFields(field.fields));
        }

        return decorator(field.name, {
          validate: [{
            rules: field.rules || [],
            trigger: 'onBlur'
          }],
          hidden: field.hidden || false,
          // rules: field.rules || [],
          valuePropName: field.valuePropName || 'value',
          initialValue: field.initialValue,
          getValueFromEvent: field.getValueFromEvent
        })(_this3.getFormFieldComponent(field));
      });
      return generatedFields;
    }
  }, {
    key: "generateErrors",
    value: function generateErrors() {
      var errors = this.state.errors;
      return errors.map(function (error) {
        return _react.default.createElement(_MessageItem.default, {
          key: btoa(error)
        }, error);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var submitButton = _react.default.createElement(_Button.default, {
        primary: true,
        onClick: this.onSubmit
      }, "Submit");

      if (this.props.submitButton) {
        var SubmitButtonInstance = this.props.submitButton;
        submitButton = _react.default.cloneElement(SubmitButtonInstance, {
          onClick: this.onSubmit
        });
      }

      var hasValidationErrors = false;

      if (this.state.errors.length > 0 && this.props.showErrors) {
        hasValidationErrors = true;
      }

      return _react.default.createElement(_Form.default, {
        success: this.props.success,
        error: this.props.error,
        className: `web-rx form ${this.props.className}`
      }, this.generateFormFields(this.props.fields), submitButton, hasValidationErrors ? _react.default.createElement(_Message.default, {
        error: true,
        visible: true
      }, _react.default.createElement(_MessageHeader.default, null, this.props.errorHeader), _react.default.createElement(_MessageList.default, null, this.generateErrors())) : this.props.errorMessage, this.props.successMessage);
    }
  }]);

  return Form;
}(_react.default.Component);

var DefaultErrorMessage = _react.default.createElement(_Message.default, {
  error: true
}, _react.default.createElement(_MessageHeader.default, null, "We have a problem"), _react.default.createElement(_MessageList.default, null, _react.default.createElement(_MessageItem.default, null, "Your form could not be submitted, try again later.")));

var DefaultSuccessMessage = _react.default.createElement(_Message.default, {
  success: true
}, _react.default.createElement(_MessageHeader.default, null, "Success!"), _react.default.createElement(_MessageList.default, null, _react.default.createElement(_MessageItem.default, null, "Your form has been submitted successfully.")));

Form.defaultProps = {
  className: null,
  context: {},
  fields: [],
  showSubmitButton: true,
  showClearButton: false,
  showErrors: true,
  error: false,
  success: false,
  errorMessage: DefaultErrorMessage,
  errorHeader: 'We have a problem',
  successMessage: DefaultSuccessMessage,
  onChange: function onChange() {},
  onSubmit: function onSubmit() {},
  onError: function onError() {},
  submitButton: null
};
Form.propTypes = {
  className: _propTypes.default.string,
  form: _rcForm.formShape.isRequired,
  context: _propTypes.default.object,
  // eslint-disable-line
  fields: _propTypes.default.array,
  // eslint-disable-line
  showSubmitButton: _propTypes.default.bool,
  showClearButton: _propTypes.default.bool,
  showErrors: _propTypes.default.bool,
  error: _propTypes.default.bool,
  success: _propTypes.default.bool,
  errorMessage: _propTypes.default.node,
  errorHeader: _propTypes.default.node,
  successMessage: _propTypes.default.node,
  onChange: _propTypes.default.func,
  onSubmit: _propTypes.default.func,
  onError: _propTypes.default.func,
  submitButton: _propTypes.default.node
};
var WrappedForm = (0, _rcForm.createForm)({
  onFieldsChange: function onFieldsChange(props, changed, all) {
    if (props.onFieldsChange) {
      props.onFieldsChange(changed, all);
    }
  }
})(Form);
var StyledForm = (0, _styledComponents.default)(WrappedForm)`
  ${_styledSystem.space}
  ${_styledSystem.height}
  ${_styledSystem.width}
`;
var _default = StyledForm;
exports.default = _default;